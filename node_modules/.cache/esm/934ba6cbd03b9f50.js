let mongoose,Schema,bcrypt,jwt;_d03‍.x([["default",()=>_d03‍.o]]);_d03‍.w("mongoose",[["default",["mongoose"],function(v){mongoose=v}],["Schema",["Schema"],function(v){Schema=v}]]);_d03‍.w("bcrypt",[["default",["bcrypt"],function(v){bcrypt=v}]]);_d03‍.w("jsonwebtoken",[["default",["jwt"],function(v){jwt=v}]]);



const UserSchema = new Schema({
    username: String,
    hashedPassword: String,
});

UserSchema.methods.setPassword = async function (password) {
    this.hashedPassword = await bcrypt.hash(password, 10);
};

UserSchema.methods.checkPassword = async function (password) {
    return await bcrypt.compare(password, this.hashedPassword);
};

UserSchema.methods.serialize = function() {
    const data = this.toJSON();
    delete data.hashedPassword;

    return data;
};

UserSchema.methods.generateToken = function() {
    return jwt.sign(
        {
            _id: this.id,
            username: this.username,
        },
        process.env.JWT_SECRET,
        {
            expiresIn: '7d',
        },);
};

UserSchema.statics.findByUsername = function (username) {
    return this.findOne({username});
};

const User = mongoose.model('User', UserSchema);
_d03‍.d(User);
