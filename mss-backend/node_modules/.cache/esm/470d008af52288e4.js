let Koa,Router,bodyParser,mongoose,serve,path,send,api,jwtMiddleWare;_f52‍.w("koa",[["default",["Koa"],function(v){Koa=v}]]);_f52‍.w("koa-router",[["default",["Router"],function(v){Router=v}]]);_f52‍.w("koa-bodyparser",[["default",["bodyParser"],function(v){bodyParser=v}]]);_f52‍.w("mongoose",[["default",["mongoose"],function(v){mongoose=v}]]);_f52‍.w("koa-static",[["default",["serve"],function(v){serve=v}]]);_f52‍.w("path",[["default",["path"],function(v){path=v}]]);_f52‍.w("koa-send",[["default",["send"],function(v){send=v}]]);_f52‍.w("./api",[["default",["api"],function(v){api=v}]]);_f52‍.w("./lib/jwtMiddleware",[["default",["jwtMiddleWare"],function(v){jwtMiddleWare=v}]]);require('dotenv').config();










// 비구조화 할당을 통해 process.env 내부 값에 대한 레퍼런스 만들기
const {PORT, MONGO_URI} = process.env;

mongoose
    .connect(MONGO_URI, { useNewUrlParser: true, useFindAndModify: false})
    .then(() => {
        console.log('Connected to MongoDB');
    })
    .catch(e => {
        _f52‍.g.console.error(e);
    });

const app = new Koa();
const router = new Router();

// 라우터 설정
router.use('/api', api.routes());

// 라우터 적용 전에 미들웨어 적용!
app.use(bodyParser());
app.use(jwtMiddleWare);

// app 인스턴스에 라우터 적용
app.use(router.routes()).use(router.allowedMethods());

const buildDirectory = path.resolve(__dirname, '../../mss-frontend/build');
app.use(serve(buildDirectory));
app.use(async ctx => {
    // 상태가 404이고, 주소가 /api로 시작하지 않으면 index.html 반환
    if (ctx.status === 404 && ctx.path.indexOf('/api') !== 0) {
        await send(ctx, 'index.html', { root: buildDirectory});
    }
});

// PORT가 지정되어 있지 않다면 4000을 사용
const port = PORT || 4000;
app.listen(port, () => {
    console.log(`Listening to port ${port}`);
});
